import React from 'react';
import * as PropTypes from 'prop-types';
import Hotkeys from 'hotkeys-js';
export default class ReactHotkeys extends React.Component {
  constructor(props) {
    super(props);
    this.isKeyDown = false;
    this.handle = void 0;
    this.onKeyDown = this.onKeyDown.bind(this);
    this.onKeyUp = this.onKeyUp.bind(this);
    this.handleKeyUpEvent = this.handleKeyUpEvent.bind(this);
    this.handle = {};
  }

  componentDidMount() {
    var {
      filter,
      splitKey
    } = this.props;

    if (filter) {
      Hotkeys.filter = filter;
    }

    Hotkeys.unbind(this.props.keyName);
    Hotkeys(this.props.keyName, {
      splitKey
    }, this.onKeyDown);
    document && document.body.addEventListener('keyup', this.handleKeyUpEvent);
  }

  componentWillUnmount() {
    Hotkeys.unbind(this.props.keyName);
    this.isKeyDown = true;
    this.handle = {};
    document && document.body.removeEventListener('keyup', this.handleKeyUpEvent);
  }

  onKeyUp(e, handle) {
    var {
      onKeyUp,
      disabled
    } = this.props;
    !disabled && onKeyUp && onKeyUp(handle.shortcut, e, handle);
  }

  onKeyDown(e, handle) {
    var {
      onKeyDown,
      allowRepeat,
      disabled
    } = this.props;
    if (this.isKeyDown && !allowRepeat) return;
    this.isKeyDown = true;
    this.handle = handle;
    !disabled && onKeyDown && onKeyDown(handle.shortcut, e, handle);
  }

  handleKeyUpEvent(e) {
    if (!this.isKeyDown) return;
    this.isKeyDown = false;
    if (this.props.keyName && this.props.keyName.indexOf(this.handle.shortcut) < 0) return;
    this.onKeyUp(e, this.handle);
    this.handle = {};
  }

  render() {
    return this.props.children || null;
  }

}
ReactHotkeys.defaultProps = {
  filter(event) {
    var target = event.target || event.srcElement;
    var tagName = target.tagName;
    return !(target.isContentEditable || tagName === 'INPUT' || tagName === 'SELECT' || tagName === 'TEXTAREA');
  }

};
ReactHotkeys.propTypes = {
  keyName: PropTypes.string,
  filter: PropTypes.func,
  onKeyDown: PropTypes.func,
  onKeyUp: PropTypes.func,
  disabled: PropTypes.bool,
  splitKey: PropTypes.string
};
//# sourceMappingURL=index.js.map